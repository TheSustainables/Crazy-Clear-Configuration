@page "/config-viewer"
@using System.Dynamic
@using System.IO
@using CrazyClearConfiguration.Adapter.Configuration.Json
@using CrazyClearConfiguration.Core.UseCases
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@inject ILogger<ConfigViewer> Logger
@inject IWebHostEnvironment Environment

<p>
    <label>
        <h3>Load configuration:</h3>
        <InputFile OnChange="@LoadFile" />
    </label>
</p>

@if (isLoading) {
    <p>Uploading...</p>
}
else if (loadedFile != null) {
    <div>
        <div>Name: @loadedFile.Name</div>
        <div>Last modified: @loadedFile.LastModified.ToString()</div>
        <div>Size (bytes): @loadedFile.Size</div>
        <div>Content type: @loadedFile.ContentType</div>
    </div>
}

@if (config != null) {
    <TrySomething />
    <MudPaper Elevation="0">
        <MudTreeView T="string" CanHover="true">
            <NestableConfiguartionTree config="@config" />
        </MudTreeView>
    </MudPaper>
}

@code {
    private IBrowserFile loadedFile;
    private long maxFileSize = 1024 * 1000;
    private int maxAllowedFiles = 1;
    private ExpandoObject config;
    private bool isLoading;
    private string configType;

    private async Task LoadFile(InputFileChangeEventArgs e) {
        isLoading = true;
        var file = e.GetMultipleFiles().First();
        config = null;

        try {
            loadedFile = file;
            var trustedFileNameForFileStorage = Path.GetRandomFileName();
            var path = Path.Combine(Environment.ContentRootPath,
                Environment.EnvironmentName, "unsafe_uploads",
                trustedFileNameForFileStorage);

            await using (FileStream fs = new(path, FileMode.Create)) {
                await file.OpenReadStream(maxFileSize).CopyToAsync(fs);
            }

            var adapter = new JsonConfigAdaptor(path);
            var usecase = new GetConfigurationUseCase(adapter);
            config = usecase.Execute().Result;
        }
        catch (Exception ex) {
            Logger.LogError("File: {Filename} Error: {Error}",
                file.Name, ex.Message);
        }

        isLoading = false;
    }
}