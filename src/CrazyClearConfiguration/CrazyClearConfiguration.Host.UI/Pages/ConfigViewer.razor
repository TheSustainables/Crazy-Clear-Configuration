@page "/config-viewer/{configProfileName}"
@using System.Dynamic
@using System.IO
@using CrazyClearConfiguration.Adapter.Configuration.Json
@using CrazyClearConfiguration.Adapter.Profile.Json
@using CrazyClearConfiguration.Core.Ports
@using CrazyClearConfiguration.Core.UseCases
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@inject ILogger<ConfigViewer> Logger
@inject IWebHostEnvironment Environment

<div class="top-row d-flex d-flex justify-content-between align-items-center">
    <div>
        @configProfileName
    </div>
    <div>
        <input type="text" class="form-control" id="filter" placeholder="Search..." @bind="filter">
    </div>
</div>

@if (config != null) {
    <div class="mb-3">
        <p>
            <MudPaper Elevation="0">
                <MudTreeView T="string">
                    <NestableConfiguartionTree config="@config" />
                </MudTreeView>
            </MudPaper>
        </p>
    </div>
}

@if (error != null) {
    <div class="mb-3">
        <h3>Something went wrong:</h3>

        <p>@error</p>
    </div>
}

@code {

    [Parameter]
    public string configProfileName { get; set; }

    private ConfigProfile configProfile;
    private ExpandoObject? config;
    private string configType;
    private string error;
    private string filter = "";

    protected override async Task OnInitializedAsync() {
        var adapter = new JsonProfileAdaptor();
        var usecase = new GetProfileUseCase(adapter);
        configProfile = await usecase.Execute("connectionData");
        var chosenProfile = configProfile.ConfigSources.SingleOrDefault(source => source.Name == configProfileName) as JsonConfigSource;
        if (chosenProfile != null) {
            var configAdapter = new JsonConfigAdaptor(chosenProfile.FilePath);
            var configUsecase = new GetConfigurationUseCase(configAdapter);
            config = await configUsecase.Execute();
        }
    }

}